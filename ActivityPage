import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:intl/intl.dart';

class Activity extends StatefulWidget {
  const Activity({Key? key}) : super(key: key);

  @override
  _ActivityState createState() => _ActivityState();
}

class _ActivityState extends State<Activity> {
  List<int> points = List<int>.filled(5, 0);
  List<String> activities = [
    'Wake Up',
    'Go to Work',
    'Take Lunch',
    'Take kids',
    'Sleep',
  ];
  List<String> activityTimes = [
    '06:00',
    '08:00',
    '12:30',
    '15:00',
    '22:30',
  ];
  List<String> activityKeywords = [
    'meeting',
    'kids',
    'sleep',
    'eat',
    'meds',
    'medicine',
    'prayer',
    'salah',
    'shalat',
    'sholat',
    'exercise',
    'jogging',
    'gym',
    'yoga',
    'meditation',
    'read Quran',
    'read holy book',
    'alms',
    'charity',
    'socialize',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ...

      // Activity and Points
      Row(
        children: [
          // Activity
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                _buildRectangleRow('Activity', Colors.grey),
                for (int i = 0; i < activities.length; i++)
                  _buildInputRow(i),
                _buildTimeInputRow(activities.length),
              ],
            ),
          ),

          // Spacing
          SizedBox(width: 10),

          // Points
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                _buildRectangleRow('Points', Colors.grey),
                for (int i = 0; i < activities.length; i++)
                  _buildPointsRow(i),
                _buildPointsRow(activities.length),
              ],
            ),
          ),
        ],
      ),

      // ...
    );
  }

  Widget _buildInputRow(int index) {
    return Container(
      height: 40,
      margin: const EdgeInsets.only(bottom: 10),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey, width: 1),
        borderRadius: BorderRadius.circular(10),
      ),
      child: TextField(
        maxLength: 15,
        decoration: InputDecoration(
          contentPadding: const EdgeInsets.symmetric(horizontal: 10),
          counterText: '',
          border: InputBorder.none,
          hintStyle: TextStyle(color: Colors.grey),
          filled: true,
          fillColor: Colors.white,
        ),
        onChanged: (value) {
          setState(() {
            bool containsKeyword = false;
            for (String keyword in activityKeywords) {
              if (value.toLowerCase().contains(keyword.toLowerCase())) {
                containsKeyword = true;
                break;
              }
            }

            // Update the points list based on the input value and containsKeyword flag
            if (containsKeyword) {
              points[index] = (Random().nextInt(6) + 5) * 0.5.toInt();
            } else {
              points[index] = value.length;
            }
          });
        },
      ),
    );
  }

  Widget _buildTimeInputRow(int index) {
    return Container(
      height: 40,
      margin: const EdgeInsets.only(bottom: 10),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey, width: 1),
        borderRadius: BorderRadius.circular(10),
      ),
      child: FormBuilderDateTimePicker(
        name: 'time',
        inputType: InputType.time,
        format: DateFormat('HH:mm'),
        decoration: InputDecoration(
          contentPadding: const EdgeInsets.symmetric(horizontal: 10),
          counterText: '',
          border: InputBorder.none,
          hintStyle: TextStyle(color: Colors.grey),
          filled: true,
          fillColor: Colors.white,
        ),
        onChanged: (value) {
          setState(() {
            if (value != null) {
              DateTime now = DateTime.now();
              DateTime selectedTime = DateTime(
                now.year,
                now.month,
                now.day,
                value.hour,
                value.minute,
              );
              points[index] = selectedTime.difference(now).inMinutes;
            } else {
              points[index] = 0;
            }
          });
        },
      ),
    );
  }

  Widget _buildPointsRow(int index) {
    return Container(
      height: 40,
      margin: const EdgeInsets.only(bottom: 10),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey, width: 1),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Text(
        points[index].toString(),
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: Colors.black,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  // Helper method to build the rectangle row widget
  Widget _buildRectangleRow(String label, Color color) {
    return Container(
      height: 30,
      color: color,
      alignment: Alignment.center,
      child: Text(
        label,
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}
